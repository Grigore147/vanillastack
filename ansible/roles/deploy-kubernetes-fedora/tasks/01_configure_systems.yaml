---
- name: Install neccessary packages
  package:
    name:
      - gnupg
      - git
      - python-pip
      - python3-pip
      - python-kubernetes
      - python3-kubernetes
      - ansible
      - needrestart
      - vim
      - lvm2
      - jq
      - curl
      - python3-passlib

- name: install pip modules
  pip:
    name:
      - pyhelm
      - openshift
    extra_args: --ignore-installed

- name: make sure, domain search is not set
  lineinfile:
    regexp: '^(.*)search(.*)$'
    state: absent
    path: /etc/resolv.conf

- name: get helm script
  get_url:
    url: https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
    dest: /tmp/get_helm.sh
    mode: '0700'

- name: install helm
  command: /tmp/get_helm.sh

## block
- name: Add cf repo      
  yum_repository:
    name: cloudfoundry
    description: cloudfoundry repo
    baseurl: https://packages.cloudfoundry.org/fedora
    gpgcheck: 1
    gpgkey: https://packages.cloudfoundry.org/fedora/cli.cloudfoundry.org.key

- name: Add kubernetes repo
  yum_repository:
    name: kubernetes
    description: kubernetes repo
    baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
    gpgcheck: 1
    gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    exclude: kubelet kubeadm kubectl

- name: enable crio
  command: "dnf module enable cri-o:{{ kubernetes.crioVersion }} -y" 

- name: get latest kube version
  shell: dnf --showduplicate list  kubelet --disableexcludes=kubernetes | grep 1.19 | tail -1 | tr -s ' ' | cut -d ' ' -f2
  register: dnf_output

- name: get kubeversion
  set_fact:
    versions: "{{ dnf_output.stdout }}"

- name: Install packages
  dnf:
    name:
      - cf7-cli
      - "kubelet-{{ versions }}"
      - "kubeadm-{{ versions }}"
      - "kubectl-{{ versions }}"
      - grubby
      - cri-o
    disable_excludes: kubernetes

- name: Disable SELinux
  selinux:
    state: disabled

- name: Disable Firewalld
  systemd: 
    name: firewalld
    masked: true
    enabled: false
    state: stopped

- name: Check if systemd.unified_cgroup_hierarchy in grubenv already
  command: grep -Fq "systemd.unified_cgroup_hierarchy=0" /boot/grub2/grubenv
  register: grubenv_systemd_check
  check_mode: no
  ignore_errors: yes
  changed_when: no

- name: Fix for systemd version 245
  template:
    src: 99-rp_filter.conf
    dest: /usr/lib/sysctl.d/99-rp_filter.conf
    mode: '0644'
    owner: root
    group: root
  register: systemd_version_245_sysctl_fix

- name: Call grubby to switch back to cgroups v1
  command: grubby --update-kernel=ALL --args=systemd.unified_cgroup_hierarchy=0 --make-default
  when: grubenv_systemd_check.rc != 0
## Block

- name: Upgrade all packages to the latest version
  package:
    name: "*"
    state: latest

- name: Set CRI-O cgroups driver
  lineinfile:
    path: /etc/crio/crio.conf
    state: present
    regexp: '^cgroup_manager =.*'
    line: 'cgroup_manager = "systemd"'

- name: Set CRI-O default_ulimits
  blockinfile:
    path: /etc/crio/crio.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    block: |
      default_ulimits = [
          "nofile=16384:24576",
          "nproc=8192:8192"
      ]

- name: Set CRI-O seccomp profile path
  lineinfile:
    path: /etc/crio/crio.conf
    state: present
    regexp: '^seccomp_profile =.*'
    line: 'seccomp_profile = "/usr/share/containers/seccomp.json"'

- name: configure kubelet
  lineinfile:
    path: /etc/default/kubelet
    regexp: '^(.*)KUBELET_EXTRA_ARGS(.*)$'
    line: 'KUBELET_EXTRA_ARGS=--cgroup-driver=systemd --container-runtime=remote --container-runtime-endpoint="unix:///var/run/crio/crio.sock"'
    create: true


