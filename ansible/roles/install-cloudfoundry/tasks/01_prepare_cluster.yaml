---
- name: copy files to cluster folder
  copy:
    src:  "{{ item }}"   
    dest: "{{ ansible_env.HOME }}/{{ clustername }}/{{ item }}"
    owner: "{{ ansible_env.USER }}"
  loop: 
    - cf-operator.tgz
    - kubecf_release.tgz

- name: copy files to cluster folder
  template:
    src:  "{{ item }}.j2"   
    dest: "{{ ansible_env.HOME }}/{{ clustername }}/{{ item }}"
    owner: "{{ ansible_env.USER }}"
  loop: 
    - kubecf-values.yaml

- name: create necessary namespaces
  k8s:
    name: "{{ item }}"
    api_version: v1
    kind: Namespace
    state: present
  loop:
  - "cf-operator"


- name: helm installation kubecf
  block:
  - name: delete namespaces
    k8s:
      state: absent
      name: "{{ item }}"
      api_version: v1
      kind: namespace
      wait: true
    loop:
      - "kubecf"
      - "cf-operator"
    ignore_errors: true

  - name: install CF Operator
    command: >
      helm install --wait cf-operator \
      --namespace cf-operator \
      --set "global.singleNamespace.name=kubecf" \
      "{{ ansible_env.HOME }}/{{ clustername }}/cf-operator.tgz" 
    register: cf_install

  - name: install Kubecf
    command: > 
      helm install kubecf \
      --namespace kubecf \
      --values "{{ ansible_env.HOME }}/{{ clustername }}/kubecf-values.yaml" \
      "{{ ansible_env.HOME }}/{{ clustername }}/kubecf_release.tgz"
    register: kubecf_install
   
  retries: 5
  delay: 5
  until: kubecf_install.rc == 0 && cf_install.rc == 0

- debug:
    msg: "{{ kubecf_install.stdout_lines }}"

- name: wait for eirini router to come up
  command: kubectl wait --namespace=kubecf --for=condition=ready pods -l name=eirini-routing --timeout=600s
  retries: 180
  delay: 10
  register: result
  until: result.rc == 0

- name: wait for router sts to be existant    
  command: kubectl wait --namespace=kubecf --for=condition=podscheduled pods router-0 --timeout=600s
  retries: 180
  delay: 10
  register: result
  until: result.rc == 0
    
- name: Patch RouterStatefullset
  command: >
    kubectl patch sts -n kubecf router \
    --patch '{"spec": {"template": {"spec": {"initContainers": [{"name": "bpm-pre-start-gorouter","securityContext": {"privileged": true}}]}}}}'


        labels:
    name: eirini-routing

